// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	models "github.com/rahul-aut-ind/service-user/domain/models"
	mock "github.com/stretchr/testify/mock"
)

// DBRepo is an autogenerated mock type for the DBRepo type
type DBRepo struct {
	mock.Mock
}

// CreateRecord provides a mock function with given fields: u
func (_m *DBRepo) CreateRecord(u *models.User) (*models.User, error) {
	ret := _m.Called(u)

	if len(ret) == 0 {
		panic("no return value specified for CreateRecord")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.User) (*models.User, error)); ok {
		return rf(u)
	}
	if rf, ok := ret.Get(0).(func(*models.User) *models.User); ok {
		r0 = rf(u)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.User) error); ok {
		r1 = rf(u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRecord provides a mock function with given fields: u
func (_m *DBRepo) DeleteRecord(u *models.User) (*models.User, error) {
	ret := _m.Called(u)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRecord")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.User) (*models.User, error)); ok {
		return rf(u)
	}
	if rf, ok := ret.Get(0).(func(*models.User) *models.User); ok {
		r0 = rf(u)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.User) error); ok {
		r1 = rf(u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindRecord provides a mock function with given fields: id
func (_m *DBRepo) FindRecord(id string) (*models.User, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindRecord")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *models.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRecords provides a mock function with given fields:
func (_m *DBRepo) ListRecords() ([]models.User, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListRecords")
	}

	var r0 []models.User
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.User, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRecord provides a mock function with given fields: u
func (_m *DBRepo) UpdateRecord(u *models.User) (*models.User, error) {
	ret := _m.Called(u)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRecord")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.User) (*models.User, error)); ok {
		return rf(u)
	}
	if rf, ok := ret.Get(0).(func(*models.User) *models.User); ok {
		r0 = rf(u)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.User) error); ok {
		r1 = rf(u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDBRepo creates a new instance of DBRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDBRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *DBRepo {
	mock := &DBRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
