// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Context is an autogenerated mock type for the Context type
type Context struct {
	mock.Mock
}

// GetHeader provides a mock function with given fields: key
func (_m *Context) GetHeader(key string) string {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetHeader")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// JSON provides a mock function with given fields: code, obj
func (_m *Context) JSON(code int, obj interface{}) {
	_m.Called(code, obj)
}

// Param provides a mock function with given fields: key
func (_m *Context) Param(key string) string {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Param")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Query provides a mock function with given fields: key
func (_m *Context) Query(key string) string {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ShouldBindJSON provides a mock function with given fields: obj
func (_m *Context) ShouldBindJSON(obj interface{}) error {
	ret := _m.Called(obj)

	if len(ret) == 0 {
		panic("no return value specified for ShouldBindJSON")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewContext creates a new instance of Context. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewContext(t interface {
	mock.TestingT
	Cleanup(func())
}) *Context {
	mock := &Context{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
