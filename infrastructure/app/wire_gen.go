// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"github.com/gin-gonic/gin"
	"github.com/rahul-aut-ind/service-user/infrastructure/caching"
	"github.com/rahul-aut-ind/service-user/infrastructure/routes"
	"github.com/rahul-aut-ind/service-user/interfaceadapters/middlewares"
	"github.com/rahul-aut-ind/service-user/interfaceadapters/repositories/dynamorepo"
	"github.com/rahul-aut-ind/service-user/interfaceadapters/repositories/mysqlrepo"
	"github.com/rahul-aut-ind/service-user/interfaceadapters/repositories/s3repo"
	"github.com/rahul-aut-ind/service-user/interfaceadapters/requesthandler"
	"github.com/rahul-aut-ind/service-user/interfaceadapters/usercontroller"
	"github.com/rahul-aut-ind/service-user/internal/awsconfig"
	"github.com/rahul-aut-ind/service-user/internal/config"
	"github.com/rahul-aut-ind/service-user/pkg/logger"
	"github.com/rahul-aut-ind/service-user/services/imageservice"
	"github.com/rahul-aut-ind/service-user/services/userservice"
)

// Injectors from wire.go:

func New(e *gin.Engine) (*App, error) {
	requestHandler := requesthandler.New(e)
	env := config.NewEnv()
	loggerLogger := logger.New()
	redisClient := caching.New(env, loggerLogger)
	mysqlClient := mysqlrepo.New(loggerLogger, env)
	service := userservice.New(mysqlClient, loggerLogger)
	awsConfig := awsconfig.NewAWSConfig(env)
	dynamoDBRepo := dynamorepo.New(awsConfig, env, loggerLogger)
	s3Repo := s3repo.New(loggerLogger, awsConfig, env)
	imageserviceService := imageservice.New(dynamoDBRepo, s3Repo, loggerLogger)
	controller := usercontroller.New(redisClient, service, imageserviceService, loggerLogger)
	validator := middlewares.New(loggerLogger)
	routesRoutes := routes.New(requestHandler, controller, validator)
	app := newApp(routesRoutes, env, loggerLogger, e)
	return app, nil
}
